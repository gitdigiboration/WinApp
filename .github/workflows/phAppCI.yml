
name: .NET Desktop CI

on:
  push:
    branches: [ Development ]
  pull_request:
    branches: [ Development ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

     env:
      Solution_Name: PhApp.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: WinAppUnitTest\WinAppUnitTest.csproj               # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    # Install the .NET Core workload
    #- name: Install .NET Core
    #  uses: actions/setup-dotnet@v1
     # with:
    #    dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.2
   # - name: Setup Nuget
    #  uses: Nuget/setup-nuget@v1.0.2

    #- name: Restore Nuget Packages
     # uses: nuget restore PhApp.sln
      
    # Execute all unit tests in the solution
  #  - name: Execute unit tests
   # dotnet test ~/projects/test1/test1.csproj
      #run: dotnet test ~\WinAppUnitTest\WinAppUnitTest.csproj
    - name: Build the Solution
      run: msbuild PhApp\PhApp.csproj

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    #- name: Restore the application
    #  run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
    #  env:
     #   Configuration: ${{ matrix.configuration }}

  #  # Decode the base 64 encoded pfx and save the Signing_Certificate
   # - name: Decode the pfx
   #   run: |
   #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
       # $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
       # [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
   # - name: Create the app package
     # run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
     # env:
    #    Appx_Bundle: Always
      #  Appx_Bundle_Platforms: x86|x64
      #  Appx_Package_Build_Mode: StoreUpload
     #   Configuration: ${{ matrix.configuration }}

    # Remove the pfx
   # - name: Remove the pfx
     # run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

     #Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
   # - name: Upload build artifacts
   # - uses: actions/upload-artifact@v2
     #    with:
     # name: MSIX Package
     # path: ${{ env.Wap_Project_Directory }}\AppPackages
  
       - name: jFrog CLI for Artifactory
          # You may pin to the exact commit or the version.
          # uses: advancedcsg-open/action-jfrog-cli@313e1c521402e7239d3facaf9b039f01a4e95e25
            uses: advancedcsg-open/action-jfrog-cli@v1.2.0
            with:
            # URL of Artifactory instance
            url: 'http://localhost:8082/ui/packages'
            # Type of authentication to use. Must be one of username, apikey or accesstoken. Defaults to apikey
            credentials type: # default is apikey
            # Username for Artifactory. Must be supplied when credentials type is username
            user: 'admin'
            # Password for Artifactory. Must be supplied when credentials type is username
            password: # optional
            # Artifactory API Key. Must be supplied when credentials type is apikey
            apikey: # optional
            # Artifactory access token. Must be supplied when credentials type is accesstoken
            access token: 'eyJ2ZXIiOiIyIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYiLCJraWQiOiJfaXNIMmNHeWRvRjZIckpRcWdqdTF4ZFJZSFpGSUJtbnA0UkYtWFVHby1ZIn0.eyJzdWIiOiJqZmZlQDAwMFwvdXNlcnNcL2FkbWluIiwic2NwIjoiYXBwbGllZC1wZXJtaXNzaW9uc1wvYWRtaW4gYXBpOioiLCJhdWQiOiIqQCoiLCJpc3MiOiJqZmZlQDAwMCIsImlhdCI6MTYzNzY5ODA1MywianRpIjoiNTJhODVjYjQtYjQ5Ni00YTlhLWFlMTQtMDE5MTY1MWJjYWYxIn0.mAGQFFHRpxJy3VSTxauCnRtUxrVlejk1dLCODPcq2EWaFcW7Txn2QenudVo7cCTJLdPojSetHNFExOCzlZtuXQjEDnNTZ8SXPSyOCZcHssTOFQsHTSBvyVKzoZf4CwVt0ZTR_P5VNdDYEpMMELDDo9E4jMo1olYm9k-WNyOJuQZJL-zeDpi0sywauuSrlrW4Mk4tQ9LEfxxSZLYdHJvmQxW_oqtqNXz9iKCdiS0lidFEiL5hNbYvDv_b-FrGKq3hX7e3PpUZ7CXodZmRg6NXymhlOuGHELpCBRorRci4oZJNxFygj6rp3q2GJyj3ESo8-bemwSK32fn_MQ83CCUimg'
            # Specify a working directory for the command to run in.
            working directory: # optional, default is .
